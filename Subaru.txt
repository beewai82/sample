Infrastructure
==========================================================

provider "aws" {
  region = "us-east-1"
}

# VPC
resource "aws_vpc" "subaru_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Subnets
resource "aws_subnet" "subaru_private_app_a" {
  vpc_id            = aws_vpc.subaru_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_subnet" "subaru_private_app_b" {
  vpc_id            = aws_vpc.subaru_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1b"
}

resource "aws_subnet" "subaru_private_db_a" {
  vpc_id            = aws_vpc.subaru_vpc.id
  cidr_block        = "10.0.3.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_subnet" "subaru_private_db_b" {
  vpc_id            = aws_vpc.subaru_vpc.id
  cidr_block        = "10.0.4.0/24"
  availability_zone = "us-east-1b"
}

# Internet Gateway
resource "aws_internet_gateway" "subaru_gw" {
  vpc_id = aws_vpc.subaru_vpc.id
}

# NAT Gateway
resource "aws_eip" "subaru_nat_eip" {
  vpc = true
}

resource "aws_nat_gateway" "subaru_nat" {
  allocation_id = aws_eip.subaru_nat_eip.id
  subnet_id     = aws_subnet.subaru_private_app_a.id
}

# Route Tables
resource "aws_route_table" "subaru_private" {
  vpc_id = aws_vpc.subaru_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.subaru_nat.id
  }
}

resource "aws_route_table_association" "subaru_private_app_assoc_a" {
  subnet_id      = aws_subnet.subaru_private_app_a.id
  route_table_id = aws_route_table.subaru_private.id
}

resource "aws_route_table_association" "subaru_private_app_assoc_b" {
  subnet_id      = aws_subnet.subaru_private_app_b.id
  route_table_id = aws_route_table.subaru_private.id
}

resource "aws_route_table_association" "subaru_private_db_assoc_a" {
  subnet_id      = aws_subnet.subaru_private_db_a.id
  route_table_id = aws_route_table.subaru_private.id
}

resource "aws_route_table_association" "subaru_private_db_assoc_b" {
  subnet_id      = aws_subnet.subaru_private_db_b.id
  route_table_id = aws_route_table.subaru_private.id
}

resource "aws_security_group" "subaru_db_sg" {
  vpc_id = aws_vpc.subaru_vpc.id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    security_groups = [aws_security_group.subaru_app_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Elastic Beanstalk Application
resource "aws_elastic_beanstalk_application" "subaru_app" {
  name        = "subaru-app"
  description = "Elastic Beanstalk Application for Subaru project"
}

# IAM Role for Elastic Beanstalk Instances with Permission Boundary
resource "aws_iam_policy" "subaru_permission_boundary" {
  name        = "subaru-permission-boundary"
  path        = "/"
  description = "Permission boundary for S3 access"
  policy      = file("permission_boundary.json")
}

resource "aws_iam_role" "subaru_beanstalk_instance_role" {
  name = "subaru-beanstalk-instance-role"

  assume_role_policy = jsonencode({
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "ec2.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
      }
    ]
  })

  permissions_boundary = aws_iam_policy.subaru_permission_boundary.arn
}

resource "aws_iam_instance_profile" "subaru_beanstalk_instance_profile" {
  name = "subaru-beanstalk-instance-profile"
  role = aws_iam_role.subaru_beanstalk_instance_role.name
}

resource "aws_iam_role_policy_attachment" "subaru_beanstalk_policy" {
  role       = aws_iam_role.subaru_beanstalk_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier"
}

resource "aws_iam_role_policy_attachment" "subaru_beanstalk_policy_2" {
  role       = aws_iam_role.subaru_beanstalk_instance_role.name
  policy_arn = "arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker"
}

# Elastic Beanstalk Environment
resource "aws_elastic_beanstalk_environment" "subaru_env" {
  name                = "subaru-env"
  application         = aws_elastic_beanstalk_application.subaru_app.name
  solution_stack_name = "64bit Amazon Linux 2 v3.1.3 running Node.js 14"

  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "InstanceType"
    value     = "t2.micro"
  }

  setting {
    namespace = "aws:ec2:vpc"
    name      = "VPCId"
    value     = aws_vpc.subaru_vpc.id
  }

  setting {
    namespace = "aws:ec2:vpc"
    name      = "Subnets"
    value     = "${aws_subnet.subaru_private_app_a.id},${aws_subnet.subaru_private_app_b.id}"
  }

  setting {
    namespace = "aws:ec2:vpc"
    name      = "ELBSubnets"
    value     = "${aws_subnet.subaru_private_app_a.id},${aws_subnet.subaru_private_app_b.id}"
  }

  setting {
    namespace = "aws:ec2:vpc"
    name      = "AssociatePublicIpAddress"
    value     = "false"
  }

  setting {
    namespace = "aws:autoscaling:launchconfiguration"
    name      = "IamInstanceProfile"
    value     = aws_iam_instance_profile.subaru_beanstalk_instance_profile.name
  }

  setting {
    namespace = "aws:elasticbeanstalk:environment"
    name      = "EnvironmentType"
    value     = "LoadBalanced"
  }
}

# RDS MySQL Database
resource "aws_db_instance" "subaru_db" {
  allocated_storage    = 20
  engine               = "mysql"
  instance_class       = "db.t2.micro"
  name                 = "subarudb"
  username             = "admin"
  password             = "password"
  parameter_group_name = "default.mysql5.7"
  vpc_security_group_ids = [aws_security_group.subaru_db_sg.id]
  db_subnet_group_name = aws_db_subnet_group.subaru_db_subnet_group.name
}

# Database Subnet Group
resource "aws_db_subnet_group" "subaru_db_subnet_group" {
  name       = "subaru-db-subnet-group"
  subnet_ids = [aws_subnet.subaru_private_db_a.id, aws_subnet.subaru_private_db_b.id]
}

============================================================================================
Permission Boundary Policy (json)
============================================================================================

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::your-bucket-name",
        "arn:aws:s3:::your-bucket-name/*"
      ],
      "Condition": {
        "IpAddress": {
          "aws:SourceIp": "your-ip-address"
        }
      }
    },
    {
      "Effect": "Deny",
      "Action": [
        "s3:*"
      ],
      "Resource": [
        "arn:aws:s3:::your-bucket-name",
        "arn:aws:s3:::your-bucket-name/*"
      ],
      "Condition": {
        "StringNotLike": {
          "aws:userid": [
            "user-id-1",
            "user-id-2"
          ],
          "aws:Referer": [
            "https://your-allowed-url.com"
          ]
        }
      }
    }
  ]
}

=========================================================================
CI/CD Pipeline with GitHub Actions
=========================================================================

name: Deploy Terraform Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.11

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: Plan Terraform
        run: terraform plan

      - name: Apply Terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
